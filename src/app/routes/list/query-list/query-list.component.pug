page-header(title="查询列表")
//- nzBordered: 是有边框
nz-card([nzBordered]="false")
  //- nz-form 组件的 inline 模式有 bug, 因此要额外指定 .search__form
  //- .search__form  的定义 :　/node_modules/@delon/theme/styles/app/pro/form.less
  //- bug 说明:
  //- https://github.com/NG-ZORRO/ng-zorro-antd/issues/1202
  form.search__form.mb-0(nz-form="", nzLayout="inline")
    //- 大小普通屏幕 分三栏 = 24/8, 小屏只分一栏
    nz-row([nzGutter]="{ md: 8, lg: 12, xl: 24 }")
      //- 指定一个条件占 1/3 行(宽屏), 如果要整行 nzMd="24"
      nz-col(nzMd="8", nzSm="24")
        nz-form-item
          nz-form-label(nzFor="no") 规则编号
          nz-form-control
            input(nz-input="",[(ngModel)]="q.no",name="no",placeholder="请输入",id="no")
      nz-col(nzMd="8", nzSm="24")
        nz-form-item
          nz-form-label(nzFor="status") 使用状态
          nz-form-control
            nz-select([(ngModel)]="q.status",name="status",nzPlaceHolder="请选择使用状态",id="status",[nzShowSearch]="true")
              nz-option(*ngFor="let statu of status; let i = index", [nzLabel]="statu.text", [nzValue]="i")
      nz-col(nzMd="8", nzSm="24", *ngIf="expandForm")
        //- 该条件只是作样子, 没有设置对应过滤的代码
        //- 同时,数值型条件, 应用 范围输入框(目前还没有这种形式的组件,以后再处理)
        nz-form-item
          nz-form-label(nzFor="callNo") 调用次数
          nz-form-control
            input(nz-input="",[(ngModel)]="q.callNo",name="callNo",placeholder="请输入调用次数",id="callNo")
      nz-col(nzMd="8", nzSm="24", *ngIf="expandForm")
        //- 该条件只是作样子, 没有设置对应过滤的代码
        nz-form-item
          nz-form-label(nzFor="updatedAt") 更新日期
          nz-form-control
            nz-range-picker([(ngModel)]="q.updatedAt",name="updatedAt",id="updatedAt")
      nz-col(nzMd="8", nzSm="24", *ngIf="expandForm")
        nz-form-item
          nz-form-label(nzFor="status") 使用状态
          nz-form-control
            nz-radio-group([(ngModel)]="q.status",name="statusRadio",id="statusRadio")
              label(nz-radio-button="",*ngFor="let statu of status; let i = index", [nzValue]="i") {{statu.text}}
      //- 展开时占整行, 占整行时,靠右
      //- nz-col([nzSpan]="expandForm ? 24 : 8", [class.text-right]="expandForm")
      //- 另一种方案,更精细一些, 指定 展开时 所占的空间, 8 16 24, 根据条件总数 / 3 的情况决定
      nz-col([nzSpan]="expandForm ? expandFormQueryBtnSpan : 8", [class.text-right]="true")
        nz-form-item.align-items-center
          button(nz-button, type="submit", nzType="primary", [nzLoading]="loading") 查询
          button(nz-button, type="reset") 重置
          a.ml-sm((click)="expandForm=!expandForm")
            | {{expandForm ? '收起' : '展开'}}
            i.anticon([class.anticon-down]="!expandForm", [class.anticon-up]="expandForm")
  nz-row(nzType="flex")
    nz-col
      nz-radio-group([(ngModel)]="q.sortDefIndex")
        label(nz-radio-button="",
          *ngFor="let s of sortList; let i = index;",
          [nzValue]="i",
          (click)="selectSort(i)")
          | {{s.title}}
          i.anticon(*ngIf="i===q.sortDefIndex && s.isCanSelectOrderMode",
            [class.anticon-arrow-up]="!s.isDesc",
            [class.anticon-arrow-down]="s.isDesc")
  nz-divider
  nz-row.mb-md(nzType="flex",nzJustify="space-between",nzAlign="middle")
    nz-col
      //- 列表工具栏: 建议 1个 主要按钮 1-2个 支持批量操作的次要按钮,
      //- 其它按钮 放到 更多操作的 菜单中
      //- 放在工具栏的按钮默认增可批量操作, 如果仅可对一笔记录操作,要通过状态或提示暗示用户
      button(nz-button="",nzType="primary")
        i.anticon.anticon-plus
        span 新建
      button.ml-sm(nz-button="",[disabled]="selectedRows.length > 0")
        | 批量操作
      nz-dropdown.ml-sm(nzPlacement="bottomLeft")
        button(nz-button="",nz-dropdown="",[disabled]="selectedRows.length > 0")
         | 更多操作
         i.anticon.anticon-down
        ul(nz-menu="")
          li(nz-menu-item="") 删除
          li(nz-menu-item="") 审核
    nz-col
      //- 如果列表提供批量操作及分页时,应提供 已选择数量的提示, 和清空选择的操作
      nz-alert(nzType="info", [nzShowIcon]="true", [nzMessage]="message")
        ng-template(#message="")
          | 已选择
          strong.text-primary {{selectedRows.length}}
          | 项&nbsp;&nbsp;
          a.ml-lg(*ngIf="selectedRows.length > 0",
            (click)="clearSelectedRows()") 清空
  //- 建议只使用 [data] 方式提供表格数据, 保持最大程度可控
  //- 且只使用后端分页功能,
  //- 且不使用表格列排序和筛选功能
  //- 且不启用固定列功能(因有缺陷)
  //- simple-table(#st="")
  simple-table(#st="",[columns]="columns", [data]="data",
    [loading]="loading", (checkboxChange)="checkboxChange($event)")
    //- simple-table 内部的 ng-template 允许接收 `$implicit`(数据行,缺省值"")、`index`、`column`(列定义) 三个值。
    //- 原示例 仅写 `let-i` 是 let-i = "$implicit" 的简写, 即在结构性指令中的 "let i = $implicit"
    //- $implicit 是 angular 微语法的隐含对象,表示 *ngFor 的当前对象
    //- 当 let- 的表达式不指定时, 默认取 $implicit
    //- 在 pug(jade) 中, 可写成 let-i = ""
    //- 注意: let- 仅可用于 ng-template
    //- st-row 对应 列定义中的 render
    ng-template(st-row="status",let-i="")
      //- https://ng.ant.design/components/badge/zh
      //- nz-badge 有个特殊功能,显示状态小圆点
      //- 可选状态:'success'(绿), 'processing'(蓝), 'default'(灰), 'error'(红), 'warning'(黄)
      nz-badge([nzStatus]="i.statusType",[nzText]="i.statusText")

